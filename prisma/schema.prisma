// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  isPaid        Boolean   @default(false)
  usage_tokens  Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  usageRecords  Usage[]

  @@index([email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Prompt {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  category  String?
  tags      String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  source    String   @default("USER") // "USER" or "AI"
  summary   String?  @db.Text // Auto-generated brief summary
  usage_id  String?  @db.VarChar(255)
  user_id   String?

  // Relations
  user      User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  usageRecords Usage[]
  versions  PromptVersion[]

  @@index([user_id])
  @@index([created_at])
  @@index([updated_at])
}

model PromptVersion {
  id        String   @id @default(cuid())
  prompt_id String
  content   String   @db.Text
  version   Int      @default(1)
  created_at DateTime @default(now())

  // Relations
  prompt    Prompt   @relation(fields: [prompt_id], references: [id], onDelete: Cascade)

  @@index([prompt_id])
}

model Usage {
  id            String   @id @default(cuid())
  user_id       String
  prompt_id     String?
  input_tokens  Int
  output_tokens Int
  total_tokens  Int
  created_at    DateTime @default(now())

  // Relations
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  prompt        Prompt?  @relation(fields: [prompt_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([created_at])
  @@index([prompt_id])
}
